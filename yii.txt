绑定参数

要避免 SQL 注入攻击 并提高重复执行的 SQL 语句的效率， 你可以 "准备（prepare）"一条含有可选参数占位符的 SQL 语句，在参数绑定时，这些占位符将被替换为实际的参数。

参数占位符可以是命名的 (表现为一个唯一的标记) 或未命名的 (表现为一个问号)。调用 [CDbCommand::bindParam()] 或 [CDbCommand::bindValue()] 以使用实际参数替换这些占位符。 这些参数不需要使用引号引起来：底层的数据库驱动会为你搞定这个。 参数绑定必须在 SQL 语句执行之前完成。

[php]
// 一条带有两个占位符 ":username" 和 ":email"的 SQL
$sql="INSERT INTO tbl_user (username, email) VALUES(:username,:email)";
$command=$connection->createCommand($sql);
// 用实际的用户名替换占位符 ":username" 
$command->bindParam(":username",$username,PDO::PARAM_STR);
// 用实际的 Email 替换占位符 ":email" 
$command->bindParam(":email",$email,PDO::PARAM_STR);
$command->execute();
// 使用新的参数集插入另一行
$command->bindParam(":username",$username2,PDO::PARAM_STR);
$command->bindParam(":email",$email2,PDO::PARAM_STR);
$command->execute();

方法 [bindParam()|CDbCommand::bindParam] 和 [bindValue()|CDbCommand::bindValue] 非常相似。唯一的区别就是前者使用一个 PHP 变量绑定参数， 而后者使用一个值。对于那些内存中的大数据块参数，处于性能的考虑，应优先使用前者。

关于绑定参数的更多信息，请参考 相关的PHP文档。
绑定列

当获取查询结果时，你也可以使用 PHP 变量绑定列。 这样在每次获取查询结果中的一行时就会自动使用最新的值填充。

[php]
$sql="SELECT username, email FROM tbl_user";
$dataReader=$connection->createCommand($sql)->query();
// 使用 $username 变量绑定第一列 (username) 
$dataReader->bindColumn(1,$username);
// 使用 $email 变量绑定第二列 (email) 
$dataReader->bindColumn(2,$email);
while($dataReader->read()!==false)
{
    // $username 和 $email 含有当前行中的 username 和 email 

 ****[query()|CDbCommand::query], 所有的 queryXXX() 方法会直接返回数据

clistview 用数组数据做dataprovide 前台 不能用->要用数组$data['']
return new CArrayDataProvider($res, array(  
            'id'=>'res',  
            'sort'=>array(  
                'attributes'=>array(  
                     'dateline',  
                ),  
            ),  
            'pagination'=>array(  
                'pageSize'=>10,  
            ),  

$this->widget('zii.widgets.CListView', array(
	 'dataProvider'=>$model->processData(),
	'itemView'=>'_list',   // refers to the partial view named '_post'
	// 'template' => '<td class="pager" colspan="8">{pager}</td>',
	//'template'=>"{summary}, {items} and {pager}", 
	'pagerCssClass' => 'pager',
	 'pager' => array(
	'nextPageLabel' => '下一页 ?',
	'prevPageLabel' => '? 上一页',
	'header' => '',
	 ),
	));






查看详细数据库查询的在	'log'=>array(
			'class'=>'CLogRouter',
			'routes'=>array(
				array(
					'class'=>'CFileLogRoute',
					'levels'=>'error, warning',
				),
				 // 下面显示页面日志 
			    array( 
			      'class'=>'CWebLogRoute', 
			      'levels'=>'trace',   //级别为trace 
			      'categories'=>'system.db.*' //只显示关于数据库信息,包							括数据库连接,数据库执行语句 
   				), ),),

save不成功的原因是未设置数据库表中不能为空的字段 还要改model中的required

说使用$this在没有对象的content 可能是方法写成了静态 但是用非静态的调用

电脑上的服务环境，window+apache+php+Mysql的配置环境，对yii框架有一定的了解。
1. 开启apache的重写模块，在httpd.conf中找到#LoadModule rewrite_module modules/mod_rewrite.so，把前面的“#”去掉。
2.重启apache服务器。
3. 在yii创建的项目根目录中添加.htaccess文件，文件的内容:
Options +FollowSymLinks
IndexIgnore */*
RewriteEngine on

# if a directory or a file exists, use it directly
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d

# otherwise forward it to index.php
RewriteRule . index.php

4. 在config的文件中的添加如下代码：
'urlManager'=>array(
	'urlFormat'=>'path',
	'rules'=>array(
		'<controller:\w+>/<id:\d+>'=>'<controller>/view',
		'<controller:\w+>/<action:\w+>/<id:\d+>'=>'<controller>/<action>',
		'<controller:\w+>/<action:\w+>'=>'<controller>/<action>',
	),
	'showScriptName'=>false,
),
5. 在浏览器的地址栏中写地址http://localhost/项目名/controller/action就可以直接直接访问了。
6. 完成

找不到路径极大可能是 单词与/之间有空格



!!!!!

下面我们列出了由 [CWebApplication] 预定义的核心组件。

    [assetManager|CWebApplication::assetManager]: [CAssetManager] - 管理私有资源文件的发布。

    [authManager|CWebApplication::authManager]: [CAuthManager] - 管理基于角色的访问控制 (RBAC).

    [cache|CApplication::cache]: [CCache] - 提供数据缓存功能。注意，你必须指定实际的类（例如[CMemCache], [CDbCache]）。 否则，当你访问此组件时将返回 NULL。

    [clientScript|CWebApplication::clientScript]: [CClientScript] - 管理客户端脚本 (javascripts 和 CSS).

    [coreMessages|CApplication::coreMessages]: [CPhpMessageSource] - 提供 Yii 框架用到的核心信息的翻译。

    [db|CApplication::db]: [CDbConnection] - 提供数据库连接。注意，使用此组件你必须配置其 [connectionString|CDbConnection::connectionString] 属性。

    [errorHandler|CApplication::errorHandler]: [CErrorHandler] - 处理未捕获的 PHP 错误和异常。

    [format|CApplication::format]: [CFormatter] - 格式化数值显示。此功能从版本 1.1.0 起开始提供。

    [messages|CApplication::messages]: [CPhpMessageSource] - 提供Yii应用中使用的信息翻译。

    [request|CWebApplication::request]: [CHttpRequest] - 提供关于用户请求的信息。

    [securityManager|CApplication::securityManager]: [CSecurityManager] - 提供安全相关的服务，例如散列，加密。

    [session|CWebApplication::session]: [CHttpSession] - 提供session相关的功能。

    [statePersister|CApplication::statePersister]: [CStatePersister] - 提供全局状态持久方法。

    [urlManager|CWebApplication::urlManager]: [CUrlManager] - 提供 URL 解析和创建相关功能

    [user|CWebApplication::user]: [CWebUser] - 提供当前用户的识别信息。

    [themeManager|CWebApplication::themeManager]: [CThemeManager] - 管理主题。















不要打开 extension interbase.dll
打开 openssl
1.首先需要下载应用模板，分为基础模板和高级应用模板，这里我以高级应用模板为例子 ： 
去这里现在高级应用模板 https://github.com/yiisoft/yii2-app-advanced

2.下载完之后解压放在www目录我是放在 D:\wamp\www\yii2\advanced

cmd dos命令进入这个D:\wamp\www\yii2\advanced下：
 

3.运行 php -r "readfile('https://getcomposer.org/installer');" | php 
 

4.这是就在D:\wamp\www\yii2\advanced目录下面下载了一个composer.phar文件，有了这个文件就可以执行php composer.phar命令了，提示：
 

5.准备所有插件！！非常重要，少了这步一切都会失败 (记得配置php环境变量啊)
执行命令：php composer.phar global require "fxp/composer-asset-plugin:1.0.0"
 

6.安装我们的yii2的应用：
执行命令：php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced ../yii2test 就会在上一层目录下生成yii2test应用 。
请注意，到第六步很可能就一直停在那里了，这个时候，登录GitHub的用户名和密码没有就注册个账号，退出cmd，重新执行第6步可。
若提示安装过程中输入你的 GitHub 的用户名和密码。那就输入它们并继续即可。
 

7.最后一步：初始化我们的应用,初始化是在你创建的yii2test目录下 执行cmd init命令 选0 y
 

ok，这么我们的yii2的安装就完成了,进入测试目录：
localhost/yii2/yii2test/frontend/web/index.php

会看到如下界面：
 

这就表明的你的yii2安装成功了，一定要记住你的php版本是php5.4以上的！

